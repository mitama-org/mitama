# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry poetry-dynamic-versioning
    - name: Build package
      run: poetry build
    - name: Upload result
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/*.tar.gz
  deploy-pypi:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download pkg
      uses: actions/download-artifact@v2
      with:
        name: dist
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
  deploy-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download pkg
      uses: actions/download-artifact@v2
      with:
        name: dist
    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: mitamaorg/mitama
        tag-semver: |
          {{version}}
          {{major}}.{{minor}}
    - name: Docker login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build docker and publish
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: mitamaorg/mitama:latest, ${{ steps.docker_meta.outputs.tags }}
        file: ./Dockerfile
  deploy-docker-mysql:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download pkg
      uses: actions/download-artifact@v2
      with:
        name: dist
    - name: Docker login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Docker meta for mysql edition
      id: docker_meta_mysql
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: mitamaorg/mitama
        tag-semver: |
          {{version}}-mysql
          {{major}}.{{minor}}-mysql
    - name: Build docker and publish for mysql edition
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: mitamaorg/mitama:latest-mysql, ${{ steps.docker_meta_mysql.outputs.tags }}
        file: ./Dockerfile.mysql
  deploy-docker-postgresql:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download pkg
      uses: actions/download-artifact@v2
      with:
        name: dist
    - name: Docker login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Docker meta for postgresql edition
      id: docker_meta_postgresql
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: mitamaorg/mitama
        tag-semver: |
          {{version}}-postgresql
          {{major}}.{{minor}}-postgresql
    - name: Build docker and publish for postgresql edition
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: mitamaorg/mitama:latest-postgresql, ${{ steps.docker_meta_postgresql.outputs.tags }}
        file: ./Dockerfile.postgresql
